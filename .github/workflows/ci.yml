name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 4

jobs:
  lint:
    name: Lint Python sources
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - name: Install lint dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff==0.5.5
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Ruff check
        run: ruff check setup_env.py tools
      - name: Validate packaging metadata
        run: python -m compileall bitnet

  python-tests:
    name: Python unit tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install .[test] || pip install .
          pip install pytest
      - name: Run pytest
        run: pytest -q

  build-native:
    name: Build native binaries (Linux)
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Install build toolchain
        run: |
          sudo apt-get update
          sudo apt-get install --yes build-essential clang cmake ninja-build
      - name: Configure CMake
        run: cmake -S . -B build -DLLAMA_BUILD_EXAMPLES=OFF -DCMAKE_BUILD_TYPE=Release
      - name: Build targets
        run: cmake --build build --config Release --target llama-cli llama-server llama-quantize
      - name: Package binaries
        run: |
          tar -czf bitnet-binaries.tar.gz -C build/bin .
      - uses: actions/upload-artifact@v4
        with:
          name: bitnet-binaries
          path: bitnet-binaries.tar.gz

  python-wheel:
    name: Build Python wheel
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - name: Build wheel
        run: |
          python -m pip install --upgrade pip
          pip install build
          python -m build --wheel
      - uses: actions/upload-artifact@v4
        with:
          name: bitnet-wheel
          path: dist/*.whl

  container-images:
    name: Build container artefacts
    runs-on: ubuntu-latest
    needs: [build-native, python-wheel]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build runtime container
        run: |
          docker buildx build \
            --file infra/docker/bitnet-runtime.Dockerfile \
            --platform linux/amd64 \
            --output type=docker,dest=bitnet-runtime.tar \
            .
          docker buildx build \
            --file infra/docker/bitnet-edge.Dockerfile \
            --platform linux/amd64 \
            --output type=docker,dest=bitnet-edge.tar \
            .
      - uses: actions/upload-artifact@v4
        with:
          name: bitnet-containers
          path: |
            bitnet-runtime.tar
            bitnet-edge.tar

  docs-sync:
    name: Documentation synchronisation checks
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Validate documentation state
        run: python tools/check_docs_sync.py

  terraform:
    name: Terraform validation
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5
      - name: Terraform fmt
        working-directory: infra/terraform
        run: terraform fmt -check
      - name: Terraform validate
        working-directory: infra/terraform
        run: |
          terraform init -backend=false
          terraform validate

  summary:
    name: CI summary gate
    runs-on: ubuntu-latest
    needs: [lint, python-tests, build-native, python-wheel, container-images, docs-sync, terraform]
    steps:
      - name: All checks passed
        run: echo "CI pipeline completed successfully."
